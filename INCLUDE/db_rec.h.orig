#ifndef __DB_REC_H
#define __DB_REC_H

#include "globaldata.h"
#include "ResManager.h"

namespace wh{
namespace rec{

//-----------------------------------------------------------------------------
// базовый класс для всех рекордов
struct Rec
{
	wxString	mID;
	wxString	mLabel;
};

//-----------------------------------------------------------------------------
/// Класс - основные метаданные - запись в таблицце классов 
struct Cls
{
	// только читаемые с базы
	wxString	mID;		//id bigserial NOT NULL,
	wxString	mVID;
	wxString	mLabel;		//label name NOT NULL,
	wxString	mType;		//type smallint NOT NULL DEFAULT 1 (class_type=0[abstract] class_type=1[numbered] OR class_type=2[quantity]),
	wxString	mParent;	//parent name NOT NULL DEFAULT 'Object'::name,
	wxString	mComment;	//description text,
	wxString	mMeasure;	//measurename text DEFAULT 'ед.'::text,
	wxString	mDefaultPid;//default_pid BIGINT    NOT NULL DEFAULT 0 --местоположение объектов по умолчанию
		
	
	Cls();
	Cls(const wxString& id, const wxString& label);
	bool operator==(const Cls& g)const;
	bool operator!=(const Cls& g)const;


	static wxString GetSelectAllQuery(const Cls& cls);
	void Load(std::shared_ptr<whTable>& table, const unsigned int row);
	void LoadAfterInsert(std::shared_ptr<whTable>& table, const unsigned int row);
	wxString GetSelectQuery()const;
	wxString GetInsertQuery()const;
	wxString GetUpdateQuery()const;
	wxString GetDeleteQuery()const;

	static void TableSetupColumn(wxDataViewCtrl* table);
	void		TableSetupGetValue(wxVariant &variant, unsigned int col)const;

};

//-----------------------------------------------------------------------------
/// Объект - основные метаданные 
struct ObjTitle
{
	wxString	mPID;		//pid bigint NOT NULL DEFAULT 0,
	wxString	mLabel;		//obj_label name NOT NULL,
	wxString	mClsLabel;	//class_label name NOT NULL,
	wxString	mComment;	// comment text,
	wxString	mVID;		// log_id bigint NOT NULL,
	wxString	mLogTime;	//log_time timestamp with time zone NOT NULL DEFAULT now(),
	wxString	mLogUser;	//log_user
	wxString	mClsType;

	wxString	mQty;	
	wxString	mID;

	ObjTitle(){}
	ObjTitle(const wxString& id,const wxString& label)
		:mLabel(label), mID(id)
	{}
	
};
//-----------------------------------------------------------------------------
/// Информация о свойстве действия - запись из БД 
struct Prop
{
	struct error : virtual exception_base {};

	wxString	mID;
	wxString	mLabel;	
	wxString	mType = L"0";

	Prop(){}
	Prop(const wxString& label, const wxString& type = L"0")
		:mLabel(label), mType(type)
	{}
	
	static wxString IntToType(unsigned int val)
	{
		switch (val)
		{
		default: BOOST_THROW_EXCEPTION(error() << wxstr("unknown type")); break;
		case 0: return L"Текст";
		case 1: return L"Число";
		case 2: return L"Дата";
		case 3: return L"Ссылка";
		case 4: return L"Файл";
		}//switch(val)
		return wxEmptyString;
	}//static wxString IntToType(unsigned int val)
	wxString GetTypeString()const
	{
		unsigned long tmp = 0;
		mType.ToULong(&tmp);
		return IntToType(tmp);
	}//wxString GetTypeString()const

};

//-----------------------------------------------------------------------------
/// действие 
class Act final
{
public:
	wxString	mID;
	wxString	mLabel;
	wxString	mComment;
	wxString	mColor;
	wxString	mScript;
	wxString	mVID;

	static wxString GetSelectAllQuery();
	void Load(std::shared_ptr<whTable>& table, const unsigned int row);
	void LoadAfterInsert(std::shared_ptr<whTable>& table, const unsigned int row);
	wxString GetSelectQuery()const;
	wxString GetInsertQuery()const;
	wxString GetUpdateQuery()const;
	wxString GetDeleteQuery()const;

	static void TableSetupColumn(wxDataViewCtrl* table);
	void		TableSetupGetValue(wxVariant &variant, unsigned int col)const;


};

//-----------------------------------------------------------------------------
/// Свойство действия
class ActProp final
{
public:
	wxString	mID;
	wxString	mPropLabel;
	wxString	mPropID;
	
	static wxString GetSelectAllQuery(const Act& act);
	void Load(std::shared_ptr<whTable>& table, const unsigned int row);
	void LoadAfterInsert(std::shared_ptr<whTable>& table, const unsigned int row);
	wxString GetSelectQuery(const Act& act)const;
	wxString GetInsertQuery(const Act& act)const;
	wxString GetUpdateQuery(const Act& act)const;
	wxString GetDeleteQuery(const Act& act)const;

	static void TableSetupColumn(wxDataViewCtrl* table);
	void		TableSetupGetValue(wxVariant &variant, unsigned int col)const;

};

//-----------------------------------------------------------------------------
/// Свойства класса
class ClsProp final
{
public:
	Prop		mProp;
	
	wxString	mVal;
	wxString	mID;

	static wxString GetSelectAllQuery(const Cls& cls);
	void Load(std::shared_ptr<whTable>& table, const unsigned int row);
	void LoadAfterInsert(std::shared_ptr<whTable>& table, const unsigned int row);
	wxString GetSelectQuery(const Cls& cls)const;
	wxString GetInsertQuery(const Cls& cls)const;
	wxString GetUpdateQuery(const Cls& cls)const;
	wxString GetDeleteQuery(const Cls& cls)const;
	
	static void TableSetupColumn(wxDataViewCtrl* table);
	void		TableSetupGetValue(wxVariant &variant, unsigned int col)const;

	static void PGSetup(wxPropertyGrid* propGrid);
	void UpdateFromPG(wxPropertyGrid* propGrid);
	void UpdateToPG(wxPropertyGrid* propGrid);
};

//-----------------------------------------------------------------------------
/// Объекты номерного класса
struct ClsObjNum final
{
	wxString	mLabel;
	wxString	mPID;
	wxString	mID;

	ClsObjNum();
	ClsObjNum(const wxString& label, const wxString& id);

	static wxString GetSelectAllQuery(const Cls& cls);
	void Load(std::shared_ptr<whTable>& table, const unsigned int row);
	void LoadAfterInsert(std::shared_ptr<whTable>& table, const unsigned int row);
	wxString GetSelectQuery(const Cls& cls)const;
	wxString GetInsertQuery(const Cls& cls)const;
	wxString GetUpdateQuery(const Cls& cls)const;
	wxString GetDeleteQuery(const Cls& cls)const;

	static void TableSetupColumn(wxDataViewCtrl* table);
	void		TableSetupGetValue(wxVariant &variant, unsigned int col)const;

	static void PGSetup(wxPropertyGrid* propGrid);
	void UpdateFromPG(wxPropertyGrid* propGrid);
	void UpdateToPG(wxPropertyGrid* propGrid);

};
//-----------------------------------------------------------------------------
//-----------------------------------------------------------------------------
/// Объекты количественного класса
struct ClsObjQty final
{
	wxString	mLabel;
	wxString	mPID;
	wxString	mQty;

	ClsObjQty();
	ClsObjQty(const wxString& label, const wxString& pid = wxEmptyString);

	static wxString GetSelectAllQuery(const Cls& cls);
	void Load(std::shared_ptr<whTable>& table, const unsigned int row);
	void LoadAfterInsert(std::shared_ptr<whTable>& table, const unsigned int row);
	wxString GetSelectQuery(const Cls& cls)const;
	wxString GetInsertQuery(const Cls& cls)const;
	wxString GetUpdateQuery(const Cls& cls)const;
	wxString GetDeleteQuery(const Cls& cls)const;

	static void TableSetupColumn(wxDataViewCtrl* table);
	void		TableSetupGetValue(wxVariant &variant, unsigned int col)const;

	static void PGSetup(wxPropertyGrid* propGrid);
	void UpdateFromPG(wxPropertyGrid* propGrid);
	void UpdateToPG(wxPropertyGrid* propGrid);
};

//-----------------------------------------------------------------------------
/// Разрешения действий класса
struct ClsActAccess final
{
	wxString	mID;
	wxString	mAcessGroup;
	wxString	mAccessDisabled;
	wxString	mScriptRestrict;

	wxString	mActID;
	wxString	mActLabel;  // имя действия???
	//wxString	mClsLabel;  // тип объекта ???
	
	wxString	mClsID;  // имя объекта
	wxString	mClsLabel;  // имя объекта
	wxString	mObjLabel;  // имя объекта
	wxString	mPath; //текущее положение объекта в который перемещают

	ClsActAccess();

	void Load(std::shared_ptr<whTable>& table, const unsigned int row);
	void LoadAfterInsert(std::shared_ptr<whTable>& table, const unsigned int row);

	static wxString GetSelectAllQuery(const wxString& clsLabel, const wxString& actLabel);

	wxString GetSelectQuery()const; // load by mID
	wxString GetInsertQuery(const wxString& clsLabel, const wxString& actLabel)const;
	wxString GetUpdateQuery()const; // update by mID
	wxString GetDeleteQuery()const; // delete by mID

	static void TableSetupColumn(wxDataViewCtrl* table);
	void		TableSetupGetValue(wxVariant &variant, unsigned int col)const;
};

//-----------------------------------------------------------------------------
///
struct ClsSlot final
{
	wxString	mID;
	wxString	mSlotClass;
	wxString	mMin;
	wxString	mMax;

	ClsSlot();

	void Load(std::shared_ptr<whTable>& table, const unsigned int row);
	void LoadAfterInsert(std::shared_ptr<whTable>& table, const unsigned int row);

	static wxString GetSelectAllQuery(const wxString& clsLabel);

	wxString GetSelectQuery()const; // load by mID
	wxString GetInsertQuery(const wxString& clsLabel)const;
	wxString GetUpdateQuery()const; // update by mID
	wxString GetDeleteQuery()const; // delete by mID

	static void TableSetupColumn(wxDataViewCtrl* table);
	void		TableSetupGetValue(wxVariant &variant, unsigned int col)const;
};

//-----------------------------------------------------------------------------
/// Разрешения действий класса
struct ClsSlotAccess final
{
	wxString	mID;
	wxString	mAcessGroup;
	wxString	mAccessDisabled;
	wxString	mScriptRestrict;
	
	wxString	mDstObj;  
	wxString	mDstPath; 

	wxString	mMovCls;
	wxString	mMovObj;
	wxString	mSrcPath;


	ClsSlotAccess();

	void Load(std::shared_ptr<whTable>& table, const unsigned int row);
	void LoadAfterInsert(std::shared_ptr<whTable>& table, const unsigned int row);

	static wxString GetSelectAllQuery(const wxString& clsLabel, const wxString& slotLabel);

	wxString GetSelectQuery()const; // load by mID
	wxString GetInsertQuery(const wxString& clsLabel, const wxString& slotLabel)const;
	wxString GetUpdateQuery()const; // update by mID
	wxString GetDeleteQuery()const; // delete by mID

	static void TableSetupColumn(wxDataViewCtrl* table);
	void		TableSetupGetValue(wxVariant &variant, unsigned int col)const;
};

//-----------------------------------------------------------------------------
/// основные метаданные действия - запись из БД
struct ActTitle
{
	wxString	mID;
	wxString	mLabel;	
	wxString	mComment;
	wxString	mColor;
	wxString	mVID;

	bool operator==(const ActTitle& u)const
	{
		return mID==u.mID && mLabel==u.mLabel && mComment==u.mComment 
			&& mColor==u.mColor && mVID==u.mVID ;
	}

	bool operator!=(const ActTitle& u)const	
	{ 
		return !operator==(u); 
	}

	
};

//-----------------------------------------------------------------------------
/// основные метаданные действия - запись из БД
struct metaact: public ActTitle
{
	//wxString	mID;
	//wxString	mLabel;	
	//wxString	mComment;
	//wxString	mColor;
	//wxString	mVID;
	
	wxString	mScript;





	bool operator==(const metaact& u)const
	{
		return mID==u.mID && mLabel==u.mLabel && mComment==u.mComment 
			&& mColor==u.mColor && mScript==u.mScript ;
	}

	bool operator!=(const metaact& u)const	
	{ 
		return !operator==(u); 
	}

	
};

//-----------------------------------------------------------------------------
/// Модель группы пользователей 
struct Role
{
	wxString	mID;
	wxString	mLabel;	
	wxString	mComment;
	
	Role();

	void Load(std::shared_ptr<whTable>& table, const unsigned int row);
	void LoadAfterInsert(std::shared_ptr<whTable>& table, const unsigned int row);

	static wxString GetSelectAllQuery();

	wxString GetSelectQuery()const; // load by mID
	wxString GetInsertQuery()const;
	wxString GetUpdateQuery()const; // update by mID
	wxString GetDeleteQuery()const; // delete by mID

	static void TableSetupColumn(wxDataViewCtrl* table);
	void		TableSetupGetValue(wxVariant &variant, unsigned int col)const;
};


//-----------------------------------------------------------------------------
/// Пользователь - запись из БД
struct User
{
	wxString	mID;
	wxString	mLabel;	
	wxString	mComment;

	wxString	mConnLimit;
	wxString	mValidUntil;
	wxString	mPassword;

	User();
	
	void Load(std::shared_ptr<whTable>& table, const unsigned int row);
	void LoadAfterInsert(std::shared_ptr<whTable>& table, const unsigned int row);

	static wxString GetSelectAllQuery();

	wxString GetSelectQuery()const; // load by mID
	wxString GetInsertQuery()const;
	wxString GetUpdateQuery()const; // update by mID
	wxString GetDeleteQuery()const; // delete by mID

	static void TableSetupColumn(wxDataViewCtrl* table);
	void		TableSetupGetValue(wxVariant &variant, unsigned int col)const;
};

//-----------------------------------------------------------------------------
/// Пользователь - запись из БД
struct UserRole
{
	wxString	mID;
	wxString	mLabel;

	UserRole();

	void Load(std::shared_ptr<whTable>& table, const unsigned int row);
	void LoadAfterInsert(std::shared_ptr<whTable>& table, const unsigned int row);

	static wxString GetSelectAllQuery(const User& user);
	wxString GetSelectQuery(const User& user)const; // load by mID
	wxString GetInsertQuery(const User& user)const;
	wxString GetUpdateQuery(const User& user)const; // update by mID
	wxString GetDeleteQuery(const User& user)const; // delete by mID

	static void TableSetupColumn(wxDataViewCtrl* table);
	void		TableSetupGetValue(wxVariant &variant, unsigned int col)const;

	bool operator==(const UserRole& u)const;
	bool operator!=(const UserRole& u)const;

};






}//namespace rec

}//namespace wh
#endif // __CLASSMODEL_H

